
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.15.2
 * Query Engine version: 461d6a05159055555eb7dfb337c9fb271cbd4d7e
 */
Prisma.prismaVersion = {
  client: "3.15.2",
  engine: "461d6a05159055555eb7dfb337c9fb271cbd4d7e"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UsersScalarFieldEnum = makeEnum({
  id_user: 'id_user',
  cd_company: 'cd_company',
  ds_email: 'ds_email',
  ds_name: 'ds_name',
  ds_password: 'ds_password',
  id_manager: 'id_manager',
  id_operational: 'id_operational',
  id_operator: 'id_operator'
});

exports.Prisma.CompanyScalarFieldEnum = makeEnum({
  id_company: 'id_company',
  ds_cnpj: 'ds_cnpj',
  ds_name: 'ds_name'
});

exports.Prisma.LocationScalarFieldEnum = makeEnum({
  id_location: 'id_location',
  ds_location: 'ds_location',
  cd_company: 'cd_company'
});

exports.Prisma.Move_statusScalarFieldEnum = makeEnum({
  id_status: 'id_status',
  ds_status: 'ds_status'
});

exports.Prisma.ClientScalarFieldEnum = makeEnum({
  id_client: 'id_client',
  ds_name: 'ds_name',
  ds_cpf: 'ds_cpf',
  cd_company: 'cd_company'
});

exports.Prisma.MarinerScalarFieldEnum = makeEnum({
  id_mariner: 'id_mariner',
  ds_name: 'ds_name',
  ds_cpf: 'ds_cpf',
  cd_company: 'cd_company'
});

exports.Prisma.ShipScalarFieldEnum = makeEnum({
  id_ship: 'id_ship',
  ds_ship: 'ds_ship',
  cd_company: 'cd_company'
});

exports.Prisma.Ship_marinerScalarFieldEnum = makeEnum({
  cd_ship: 'cd_ship',
  cd_mariner: 'cd_mariner',
  id_cliente_mariner: 'id_cliente_mariner'
});

exports.Prisma.Ship_clientScalarFieldEnum = makeEnum({
  cd_ship: 'cd_ship',
  cd_client: 'cd_client',
  id_cliente_mariner: 'id_cliente_mariner'
});

exports.Prisma.MovimentationScalarFieldEnum = makeEnum({
  id_movimentation: 'id_movimentation',
  cd_company: 'cd_company',
  dt_finished: 'dt_finished',
  dt_opned: 'dt_opned',
  id_finished: 'id_finished',
  cd_move_status: 'cd_move_status',
  cd_nav_plan: 'cd_nav_plan'
});

exports.Prisma.Navagation_planScalarFieldEnum = makeEnum({
  qt_crew: 'qt_crew',
  qt_passengers: 'qt_passengers',
  dt_departure: 'dt_departure',
  dt_arrival: 'dt_arrival',
  ds_observation: 'ds_observation',
  cd_destiny: 'cd_destiny',
  cd_user: 'cd_user',
  cd_company: 'cd_company',
  cd_move_status: 'cd_move_status',
  id_nav_plan: 'id_nav_plan'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});


exports.Prisma.ModelName = makeEnum({
  users: 'users',
  company: 'company',
  location: 'location',
  move_status: 'move_status',
  client: 'client',
  mariner: 'mariner',
  ship: 'ship',
  ship_mariner: 'ship_mariner',
  ship_client: 'ship_client',
  movimentation: 'movimentation',
  navagation_plan: 'navagation_plan'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
